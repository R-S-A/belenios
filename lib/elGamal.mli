(** ElGamal cryptographic operations *)

open Serializable_compat_t

module type GROUP = sig
  type t
    (** type of elements *)

  val g : t
    (** generator *)

  val q : Z.t
    (** order of [g] *)

  val p : Z.t
    (** order of surrounding group *)

  val ( *~ ) : t -> t -> t
    (** multiplication *)

  val ( **~ ) : t -> Z.t -> t
    (** exponentiation *)

  val ( =~ ) : t -> t -> bool
    (** equality test *)

  val inv : t -> t
    (** inversion *)

  val check_element : t -> bool
    (** check group membership *)

  val hash : t list -> Z.t
    (** hash a list of elements into an integer mod [q] using SHA-1 *)
end
  (** Signature of an abstract group suitable for ElGamal. *)

val make_ff_msubgroup : p:Z.t -> q:Z.t -> g:Z.t -> (module GROUP with type t = Z.t)
  (** [make_ff_msubgroup p q g] builds the multiplicative subgroup of
      F[p], generated by [g], of order [q]. *)

module type ELGAMAL_CRYPTO = sig
  type t
  val check_public_key : t public_key -> bool
  val check_private_key : t private_key -> bool
  val check_election_key : t -> t trustee_public_key array -> bool
  val check_ballot : t election -> string -> t ballot -> bool
  val check_partial_decryptions : t election ->
    t trustee_public_key array -> t result -> bool
  val check_result : t election -> t result -> bool
  val compute_encrypted_tally : t election -> t ballot array -> t encrypted_tally
end

module Make (G : GROUP) : ELGAMAL_CRYPTO with type t := G.t
