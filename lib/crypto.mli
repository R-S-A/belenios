(** Cryptographic primitives *)

val finite_field : p:Z.t -> q:Z.t -> g:Z.t ->
  (module Crypto_sigs.GROUP with type t = Z.t)
(** [finite_field p q g] builds the multiplicative subgroup of F[p],
    generated by [g], of order [q]. *)

val check_finite_field : p:Z.t -> q:Z.t -> g:Z.t -> bool
(** Check consistency of finite field parameters. *)

val check_election : (module Crypto_sigs.ELECTION_PARAMS) -> bool
(** Check consistency of election parameters. *)

module MakeElection (P : Crypto_sigs.ELECTION_PARAMS) :
  Crypto_sigs.ELECTION with type elt = P.G.t
