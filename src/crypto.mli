(** Cryptographic primitives *)

val finite_field : p:Z.t -> q:Z.t -> g:Z.t ->
  (module Crypto_sigs.GROUP with type t = Z.t)
(** [finite_field p q g] builds the multiplicative subgroup of F[p],
    generated by [g], of order [q]. It performs basic consistency
    checks on [p], [q] and [g] and raises [Invalid_argument] in caise
    of failure. *)

module MakeHomomorphicElection (P : Crypto_sigs.ELECTION_PARAMS) :
  Crypto_sigs.HOMOMORPHIC with type public_key = P.G.t
