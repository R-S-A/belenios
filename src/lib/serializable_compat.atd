<doc text="Serializable datatypes (compatibility layer)">

(** {1 Core types} *)

type number <ocaml predef from="Serializable_builtin"> = abstract
type uuid <ocaml predef from="Serializable_builtin"> = abstract
type datetime <ocaml predef from="Serializable_builtin"> = abstract
type int_or_null <ocaml predef from="Serializable_builtin"> = abstract

(** {1 ElGamal keys} *)

type 'a public_key = {
  g : 'a;
  p : number;
  q : number;
  y : 'a;
}

type 'a private_key = {
  public_key : 'a public_key;
  x : number;
}

(** {1 Elections} *)

type tally_type = [
  | Homomorphic <json name="homomorphic">
]

type choice_type = [
  | Approval <json name="approval">
]

type result_type = [
  | Absolute <json name="absolute">
  | Relative <json name="relative">
]

type election_state = [
  | Setup <json name="setup">
  | Frozen <json name="frozen">
  | Started <json name="started">
  | Stopped <json name="stopped">
  | Finished <json name="finished">
]

type question = {
  answer_urls : unit list;
  answers : string list <ocaml repr="array">;
  choice_type : choice_type;
  max : int_or_null;
  min : int;
  question : string;
  result_type : result_type;
  short_name : string;
  tally_type : tally_type;
} <ocaml field_prefix="q_">

type 'a params = {
  cast_url : string;
  description : string;
  frozen_at : datetime;
  name : string;
  openreg : bool;
  public_key : 'a public_key;
  questions : question list <ocaml repr="array">;
  uuid : uuid;
  short_name : string;
  use_voter_aliases : bool;
  voters_hash : unit;
  voting_ends_at : unit;
  voting_starts_at : unit;
} <ocaml field_prefix="e_">

(** {1 Ballots} *)

type 'a choice <ocaml predef from="Serializable" t="ciphertext"> = {
  alpha : 'a;
  beta : 'a;
}

type 'a commitment = {
  a <json name="A"> : 'a;
  b <json name="B"> : 'a;
}

type 'a proof = {
  challenge : number;
  commitment : 'a commitment;
  response : number;
} <ocaml field_prefix="dp_">

type 'a disjunctive_proof = 'a proof list <ocaml repr="array">

type 'a answer = {
  choices : 'a choice list <ocaml repr="array">;
  individual_proofs : 'a disjunctive_proof list <ocaml repr="array">;
  overall_proof : 'a disjunctive_proof;
}

type 'a ballot = {
  answers : 'a answer list <ocaml repr="array">;
  election_hash : string;
  election_uuid : uuid;
}

(** {1 Tally} *)

type 'a tally = 'a choice list <ocaml repr="array"> list <ocaml repr="array">

type 'a encrypted_tally = {
  num_tallied : int;
  tally : 'a tally;
}

(** {1 Partial decryptions} *)

type 'a pok = {
  challenge : number;
  commitment : 'a;
  response : number;
} <ocaml field_prefix="pok_">

type 'a trustee_public_key = {
  pok : 'a pok;
  public_key : 'a public_key;
} <ocaml field_prefix="trustee_">

type 'a partial_decryption = {
  decryption_factors : 'a list <ocaml repr="array"> list <ocaml repr="array">;
  decryption_proofs : 'a proof list <ocaml repr="array"> list <ocaml repr="array">;
}

type raw_result = int list <ocaml repr="array"> list <ocaml repr="array">
